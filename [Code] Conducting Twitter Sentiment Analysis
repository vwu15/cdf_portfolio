# Twitter Sentiment Analysis 
# Code Using Python

# Code Description:
# Creates a graphical user interface allowing the user to enter a search term or phrase
# Searches Twitter for the first 200 tweets containing that term or phrase
# Classifies those tweets as either positive, negative, or neutral
# Returns the percentages of positive, negative, and neutral tweets out of those 200 tweets 
# Displays the percentages in a messagebox to the user

import tkinter
import tkinter.messagebox
import re 
import tweepy 
from tweepy import OAuthHandler 
from textblob import TextBlob 


class TwitterClient(object):
    ''' 
    Generic Twitter Class for sentiment analysis. 
    '''

    def __init__(self):
        ''' 
        Class constructor or initialization method. 
        '''
        # keys and tokens from the Twitter Dev Console
        consumer_key = 'G0w7VPHoBth5weHpIBea3PGg7'
        consumer_secret = 'b8qW2OnM7XFQgVcQCG9XfFBBRX1Psj7dKOCAE5MMnR3G8e8pIZ'
        access_token = '1049781888532049924-d8ndRa9ia1tCH7iPd67bGWVIxyeSca'
        access_token_secret = 'ECRvLOxYxEJYDTyQC5sVcJ2T5jX9y6H6FEjdPxjRoWosT'

        # attempt authentication
        try:
            # create OAuthHandler object
            self.auth = OAuthHandler(consumer_key, consumer_secret)
            # set access token and secret
            self.auth.set_access_token(access_token, access_token_secret)
            # create tweepy API object to fetch tweets
            self.api = tweepy.API(self.auth)
        except:
            print("Error: Authentication Failed")

    def clean_tweet(self, tweet):
        ''' 
        Utility function to clean tweet text by removing links, special characters 
        using simple regex statements. 
        '''
        return ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t]) |(\w+:\/\/\S+)", " ", tweet).split())

    def get_tweet_sentiment(self, tweet):
        ''' 
        Utility function to classify sentiment of passed tweet 
        using textblob's sentiment method 
        '''
        # create TextBlob object of passed tweet text
        analysis = TextBlob(self.clean_tweet(tweet))
        # set sentiment
        if analysis.sentiment.polarity > 0:
            return 'positive'
        elif analysis.sentiment.polarity == 0:
            return 'neutral'
        else:
            return 'negative'

    def get_tweets(self, query, count=10):
        ''' 
        Main function to fetch tweets and parse them. 
        '''
        # empty list to store parsed tweets
        tweets = []

        try:
            # call twitter api to fetch tweets
            fetched_tweets = self.api.search(q=query, count=count)

            # parsing tweets one by one
            for tweet in fetched_tweets:
                # empty dictionary to store required params of a tweet
                parsed_tweet = {}

                # saving text of tweet
                parsed_tweet['text'] = tweet.text
                # saving sentiment of tweet
                parsed_tweet['sentiment'] = self.get_tweet_sentiment(
                    tweet.text)

                # appending parsed tweet to tweets list
                if tweet.retweet_count > 0:
                    # if tweet has retweets, ensure that it is appended only once
                    if parsed_tweet not in tweets:
                        tweets.append(parsed_tweet)
                else:
                    tweets.append(parsed_tweet)

            # return parsed tweets
            return tweets

        except tweepy.TweepError as e:
            # print error (if any)
            print("Error : " + str(e))


class Calculator:

    def __init__(self, API):
        # Create main window widget
        self.main_window = tkinter.Tk()
        # Give ourself access to the Twitter API class inside the calculator window
        self.API = API

        # Create two frames to group widgets
        self.top_frame = tkinter.Frame(self.main_window)
        self.bottom_frame = tkinter.Frame(self.main_window)

        # Create widgets for the top frame
        self.prompt_label = tkinter.Label(self.top_frame, text='Enter Tweet:')
        self.tweet_entry = tkinter.Entry(self.top_frame, width=20)

        # Pack top frame's widgets
        self.prompt_label.pack(side='left')
        self.tweet_entry.pack(side='left')

        # Create widgets for the bottom frame
        self.calc_button = tkinter.Button(
            self.bottom_frame, text='Calculate Sentiment', command=self.convert)
        self.quit_button = tkinter.Button(
            self.bottom_frame, text='Quit', command=self.main_window.destroy)

        # Create Canvas widget
        self.canvas = tkinter.Canvas(self.main_window, width=200, height=50)

        # Pack buttons
        self.calc_button.pack(side='left')
        self.quit_button.pack(side='left')

        # Pack frames
        self.top_frame.pack()
        self.bottom_frame.pack()

        # Pack the canvas
        self.canvas.pack()

        # Enter tkinter main loop
        tkinter.mainloop()

    def convert(self):
        tweet_entry_text = self.tweet_entry.get()
        responses = self.API.get_tweets(query=tweet_entry_text, count=200)
        ptweets = [tweet for tweet in responses if tweet['sentiment'] == 'positive']
        ntweets = [tweet for tweet in responses if tweet['sentiment'] == 'negative']
        p_tweet_percent = round(100*len(ptweets)/len(responses), 2) # Rounding so we have a nicer number to work with
        n_tweet_percent = round(100*len(ntweets)/len(responses), 2)
        nuetral_percent = round(100* ((len(responses) - len(ptweets) - len(ntweets))/len(responses)), 2)
        tkinter.messagebox.showinfo("Results", tweet_entry_text + " is " + str(p_tweet_percent) + "% positive, " +
            str(n_tweet_percent) + "% negative, and " +  str(nuetral_percent) + "% neutral.")



# Create an instance of the Calculator class

def main():
    api = TwitterClient() 
    calc_sent = Calculator(api)

main()
